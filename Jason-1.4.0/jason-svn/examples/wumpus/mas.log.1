[RunCentralisedMAS] Creating environment jason.eis.EISAdapter("lib/wumpusenv.jar",agent_entity(ag,agent),map(file,"maps/wumpus.kt5.wld"))
[RunCentralisedMAS] Creating agent ag (1/1)
[httpserver] HttpServer created http 0.0.0.0/0.0.0.0:3272
[httpserver] context created: /
[httpserver] context created: /agents
[httpserver] context created: /agent-mind/no_ag
[DirectiveProcessor] Processing directive include("kb.asl")
[Include] as2j: AgentSpeak program 'kb.asl' parsed successfully!
[DirectiveProcessor] Processing directive include("search.asl")
[DirectiveProcessor] Processing directive register_function("search.h",2,"h")
[Include] as2j: AgentSpeak program 'search.asl' parsed successfully!
[DirectiveProcessor] Processing directive include("aux.asl")
[Include] as2j: AgentSpeak program 'aux.asl' parsed successfully!
[ag] as2j: AgentSpeak program 'ag.asl' parsed successfully!
[ag] Doing (add) brf for borders(1,1,4,4)[source(self)]
[ag] Doing (add) brf for orientation(east)[source(self)]
[ag] Doing (add) brf for pos(1,1)[source(self)]
[ag] as2j: AgentSpeak program 'jar:file:/Users/MarcioNote/anytimeJason/Jason-1.4.1/jason-svn/lib/jason.jar!/asl/kqmlPlans.asl' parsed successfully!
[RunCentralisedMAS] Creating controller jason.control.ExecutionControlGUI
[ag] Start new reasoning cycle
[ag] percepts: [time(0)[entity(agent)]]
[ag] Selected event +!main[source(self)]
[ag] Selected option (@l__8[source(self)] +!main <- !init; !find(gold); !quit_cave.,{}) for event +!main[source(self)]
[ag] Selected intention intention 1: 
    +!main[source(self)] <- ... !init; !find(gold); !quit_cave / {}

[ag] Informing controller that I finished a reasoning cycle 0. Breakpoint is false
[ExecutionControl] Cycle 0 finished by timeout!
[ExecutionControl] Cycle 0 finished by timeout!
[ExecutionControl] Cycle 0 finished by timeout!
[ag] Start new reasoning cycle
[ag] percepts: [time(0)[entity(agent)]]
[ag] Selected event +!init[source(self)]
intention 1: 
    +!main[source(self)] <- ... !init; !find(gold); !quit_cave / {}

[ag] Selected option (@l__9[source(self)] +!init <- !update(breeze); !update(stench).,{}) for event +!init[source(self)]
intention 1: 
    +!main[source(self)] <- ... !init; !find(gold); !quit_cave / {}

[ag] Selected intention intention 1: 
    +!init[source(self)] <- ... !update(breeze); !update(stench) / {}
    +!main[source(self)] <- ... !init; !find(gold); !quit_cave / {}

[ag] Informing controller that I finished a reasoning cycle 1. Breakpoint is false
[ExecutionControl] Agent ag has finished cycle 1, # of finished agents is 1/1
[ExecutionControl] All agents have finished cycle 1
[ExecutionControl] Cycle 1 finished by timeout!
[ExecutionControl] Cycle 1 finished by timeout!
[ExecutionControl] Cycle 1 finished by timeout!
[ExecutionControl] Cycle 1 finished by timeout!
[ExecutionControl] Cycle 1 finished by timeout!
[ag] Start new reasoning cycle
[ag] percepts: [time(0)[entity(agent)]]
[ag] Selected event +!update(breeze)[source(self)]
intention 1: 
    +!init[source(self)] <- ... !update(breeze); !update(stench) / {}
    +!main[source(self)] <- ... !init; !find(gold); !quit_cave / {}

[ag] Selected option (@l__22[source(self)] +!update(breeze) : (not (breeze[source(percept)]) & pos(X,Y)) <- +~breeze(X,Y).,{X=1, Y=1}) for event +!update(breeze)[source(self)]
intention 1: 
    +!init[source(self)] <- ... !update(breeze); !update(stench) / {}
    +!main[source(self)] <- ... !init; !find(gold); !quit_cave / {}

[ag] Selected intention intention 1: 
    +!update(breeze)[source(self)] <- ... +~breeze(X,Y) / {X=1, Y=1}
    +!init[source(self)] <- ... !update(breeze); !update(stench) / {}
    +!main[source(self)] <- ... !init; !find(gold); !quit_cave / {}

[ag] Doing (add) brf for ~breeze(1,1)[source(self)]
[ag] Added event +~breeze(1,1)[source(self)]
intention 1: 
    +!update(breeze)[source(self)] <- ... +~breeze(X,Y) / {X=1, Y=1}
    +!init[source(self)] <- ... !update(breeze); !update(stench) / {}
    +!main[source(self)] <- ... !init; !find(gold); !quit_cave / {}
, events = [+~breeze(1,1)[source(self)]
intention 1: 
    +!update(breeze)[source(self)] <- ... +~breeze(X,Y) / {X=1, Y=1}
    +!init[source(self)] <- ... !update(breeze); !update(stench) / {}
    +!main[source(self)] <- ... !init; !find(gold); !quit_cave / {}
]
[ag] Informing controller that I finished a reasoning cycle 2. Breakpoint is false
[ExecutionControl] Agent ag has finished cycle 2, # of finished agents is 1/1
[ExecutionControl] All agents have finished cycle 2
[ExecutionControl] Cycle 2 finished by timeout!
[ExecutionControl] Cycle 2 finished by timeout!
[ExecutionControl] Cycle 2 finished by timeout!
[ag] Start new reasoning cycle
[ag] percepts: [time(0)[entity(agent)]]
[ag] Selected event +~breeze(1,1)[source(self)]
intention 1: 
    +!update(breeze)[source(self)] <- ... +~breeze(X,Y) / {X=1, Y=1}
    +!init[source(self)] <- ... !update(breeze); !update(stench) / {}
    +!main[source(self)] <- ... !init; !find(gold); !quit_cave / {}

[ExecutionControl] Cycle 2 finished by timeout!
[ag] Selected intention intention 1: 
    +!update(breeze)[source(self)] <- ... null / {X=1, Y=1}
    +!init[source(self)] <- ... !update(breeze); !update(stench) / {}
    +!main[source(self)] <- ... !init; !find(gold); !quit_cave / {}

[ag] Returning from IM l__22[source(self)], te=+!update(breeze) unif={X=1, Y=1}
[ExecutionControl] Agent ag has finished cycle 3, # of finished agents is 1/1
[ExecutionControl] All agents have finished cycle 3
[ExecutionControl] Cycle 3 finished by timeout!
[ag] Start new reasoning cycle
[ag] percepts: [time(0)[entity(agent)]]
[ag] Selected intention intention 1: 
    +!init[source(self)] <- ... !update(stench) / {}
    +!main[source(self)] <- ... !init; !find(gold); !quit_cave / {}

[ExecutionControl] Agent ag has finished cycle 4, # of finished agents is 1/1
[ExecutionControl] All agents have finished cycle 4
[ExecutionControl] Cycle 4 finished by timeout!
[ag] Start new reasoning cycle
[ag] percepts: []
[ag] I finished!
